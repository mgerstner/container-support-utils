.TH NS-EXEC 1 "26 April 2020"
.UC 6
.SH NAME
ns-exec - open shell inside a running container
.SH SYNOPSIS
.BR ns-exec " [ \fIoptions\fP ...]
.SH DESCRIPTION
This support utility allows admins to open a shell in any container
accessible from the current context.
.P
When invoked without arguments,
.B ns-exec
will display a list of visible containers (excluding itself).
For each container,
.B ns-exec
display the PID of a running process within the container, and the
container's nodename as returned by
.BR uname (2).
A container, in this case, is a group of processes sharing a
common uts namespace.
.P
In order to start a shell inside a container, invoke
.B ns-exec
with the
.B --container
option, and specify a container ID. This ID can be either
a pid of a process, or the nodename as described above.
.P
This will create a pty pair, fork a subprocess, attach it to the pty
slave, and attach to all namespaces of the indicated container. If
that is successful,
.B ns-exec
will execute
.BR /bin/bash .
.SS Options
.TP
.BI \-\-container " container-id\fR,\fP " \-C " container-id
Identify the container in which to execute the shell process.
.TP
.BI \-\-shell " shell-path\fR,\fP " \-S " shell-path
Specify the path to an alternative shell binary. This can be useful
if the target container does not have /bin/bash (or possibly even
dynamic libraries). In this case, you could install a statically
linked shell binary such as busybox in your calling context, and
invoke
.BR "ns-exec \-\-shell /usr/bin/busybox-static" .
.B ns-exec
will then try to execute the busybox image inside the target
container (using
.BR execveat (2)).
.TP
.BI \-\-export " host-path:container-path\fR,\fP " \-M " host-path:container-path
This option allows you to provide additional tooling in the container
you wish to inspect, such as
.B strace
or
.BR vi .
When given this option, ns-exec will attempt to mount the given
.I host-path
(in the host namespace) on directory
.I container-path
inside the container namespace.
.IP
Several directories can be exported by providing \fB\-\-export\fP
repeatedly.
.IP
These mounts will only be visible to your diagnostic shell; the
mount namespace of the application(s) running inside the container
will not be polluted. When you exit the diagnostic shell, these
mounts will disappear in a puff of kernel logic.
.IP
Two caveats apply. Firstly, the
.I container-path
mount point is expected to exist; it is not created on the fly.
Second, this mechanism can currently only be used to export files
\fIto\fP the container. Due to the way this directory is set up
inside the container, changes made to them will not be propagated
back to the host.
.IP
So in particular, if you collect log files in the
container and later wish to export them, writing them to an
exported directory is not the right approach. This is what the
.B \-\-savelogs
option is for.
.TP
.BI \-\-savelogs " directory
This option enables you to save log files from within the container
to a designated directory in the host context. In order to use this
facility, you need the
.BR savelog (1)
helper program accessible inside the container (for example, by
exporting it to your shell session via
.BR \-\-export ).
.TP
.BR \-\-debug ", " \-d
Enable debugging (currently somewhat terse). If no log file is specified,
information is written to
.B ns-exec.log
in the current working directory.
.TP
.BI \-\-logfile " filename\fR,\fP " \-L " filename
Specify a file to which debugging information is logged.
.SH CONSIDERATIONS
The easiest way to run this utility is to do so as root from the host side, because
all required privileges are available.
.P
If the tool is to be included in a diagnostic container, you have to ensure
that this container shares the pid namespace with the container(s) you wish
to inspect, and that the diagnostic container has adequate privilege.
.SS Diagnostic Standalone Container
With this setup, you would create a container including the
.B ns-exec
utility (and possibly other useful stuff), and run it with full privilege,
sharing the pid namespace with the host:
.P
.in +2
.nf
.B podman run --privileged --cap-add=all --pid=host -it \fImy-container\fP
.fi
.in
.P
If you now attach to your diagnostic container,
.B ns-exec
should be able to see (and enter) all containers running on this host.
.P
.SS Diagnostic Sidecar Container
With this approach, you would create a pod that includes the original
container, plus your diagnostic container, for instance like this:
.P
.in +2
.nf
.B podman pod create --name sleuth --share=pid
.B id1=$(podman create --pod=sleuth --name=sleuth.main \fIorig-container\fP)
.B id2=$(podman create --pod=sleuth --name=sleuth.sidecar --privileged=true \fImy-container\fP)
.B podman pod start sleuth
.fi
.in
.P
If you now attach to the sidecar container,
.B ns-exec
should be able to see (and enter) just the container you wish to debug.
.SH SEE ALSO
.BR namespaces (7),
.BR savelog (1),
.BR nsenter (1).
.SH AUTHORS
Written by Olaf Kirch <okir@suse.com>
